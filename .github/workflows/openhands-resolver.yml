name: Resolve Issue with OpenHands

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  setup-postgres:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.1-alpine
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

  call-openhands-resolver:
    needs: setup-postgres
    runs-on: ubuntu-latest
    steps:
      - name: Restore PostgreSQL database
        run: |
          docker run --name postgres -e POSTGRES_DB=${{ vars.POSTGRES_DB }} -e POSTGRES_USER=${{ vars.POSTGRES_USER }} -e POSTGRES_PASSWORD=${{ vars.POSTGRES_PASSWORD }} -d -p 5432:5432 postgres:14.1-alpine
          sleep 10
          psql -U ${{ vars.POSTGRES_USER }} -d ${{ vars.POSTGRES_DB }} -f db_dump.sql
      - name: Call OpenHands Resolver
        uses: All-Hands-AI/OpenHands/.github/workflows/openhands-resolver.yml@main
        with:
          macro: ${{ vars.OPENHANDS_MACRO || '@openhands-agent' }}
          max_iterations: ${{ fromJson(vars.OPENHANDS_MAX_ITER || 50) }}
          base_container_image: ${{ vars.OPENHANDS_BASE_CONTAINER_IMAGE || '' }}
          LLM_MODEL: ${{ vars.LLM_MODEL || 'anthropic/claude-3-5-sonnet-20241022' }}
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          PAT_USERNAME: ${{ secrets.PAT_USERNAME }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
